while t < T_Max:
    
    Chemical_Signal_Flag = 0
    
    if int(t/dt) % 100 == 0:
        
        #Should be fixed
        for i in range(0, Amount_Concentration_Signal):
            if(Chemical_Signal_Points[i] == 0):
                if t >= Concentration_Point_Coordinates[2][i] and t <= Concentration_Point_Coordinates[3][i]:
                    Chemical_Signal_Points[i] = gmsh.model.geo.add_point(Concentration_Point_Coordinates[0][i], Concentration_Point_Coordinates[1][i], 0, lc)
            else:
                gmsh.model.geo.remove([(0, Chemical_Signal_Points[i])])
                Chemical_Signal_Points[i] = 0
                    
        update_cell_coordinates(Cell_Nucleus_Coordinates, Cell_Membrane_Coordinates, Center_Cell_Points, Inner_Cell_Points, Outer_Cell_Points, Outer_Cell_Lines, Inner_Cell_Lines)
        gmsh.model.mesh.generate()
        write_mesh_to_vtk(f"time_{int(PV_TIME)}.vtk")
        PV_TIME += 1

    for cell_number in range(1, Cell_Amount + 1):
        
        
        original_c_x = Original_Cell_Nucleus_Coordinates[0][cell_number][0]
        original_c_y = Original_Cell_Nucleus_Coordinates[1][cell_number][0]
        Mx = solve_Mx(Node_Amount, Cell_Membrane_Coordinates, Cell_Nucleus_Coordinates, cell_number, rho_1, rho_2)
        My = solve_My(Node_Amount, Cell_Membrane_Coordinates, Cell_Nucleus_Coordinates, cell_number, rho_1, rho_2)
        A1 = solve_A(Node_Amount, Cell_Membrane_Coordinates, Cell_Nucleus_Coordinates, cell_number, rho_1, rho_2)
        Cell_Nucleus_Coordinates[0][cell_number][0], Cell_Nucleus_Coordinates[1][cell_number][0] = solve_center_of_mass(Mx,My,A1)
        c_x = Cell_Nucleus_Coordinates[0][cell_number][0]
        c_y = Cell_Nucleus_Coordinates[1][cell_number][0]

        for i in range(1, Node_Amount + 1):

            for j in range(0, Amount_Concentration_Signal):
            
                if t >= Concentration_Point_Coordinates[2][j] and t <= Concentration_Point_Coordinates[3][j]:
                    dcx, dcy = solve_grad_c(Cell_Membrane_Coordinates[0][cell_number][i], Concentration_Point_Coordinates[0][j], Cell_Membrane_Coordinates[1][cell_number][i],Concentration_Point_Coordinates[1][j], t - Concentration_Point_Coordinates[2][j], mu, teps, A)
                    Chemical_Signal_Flag = 1
                elif Chemical_Signal_Flag == 0:
                    dcx, dcy = 0, 0
                    random_move(Cell_Membrane_Coordinates, Cell_Nucleus_Coordinates, Node_Amount, cell_number)
                
                # Update cell membrane coordinates
                m_x = Cell_Membrane_Coordinates[0][cell_number][i]
                m_y = Cell_Membrane_Coordinates[1][cell_number][i]
                n_x = Cell_Nucleus_Coordinates[0][cell_number][i]
                n_y = Cell_Nucleus_Coordinates[1][cell_number][i]
                
                original_m_x = Original_Cell_Membrane_Coordinates[0][cell_number][i]
                original_m_y = Original_Cell_Membrane_Coordinates[1][cell_number][i]
                original_n_x = Original_Cell_Nucleus_Coordinates[0][cell_number][i]
                original_n_y = Original_Cell_Nucleus_Coordinates[1][cell_number][i]
                
                if i == 1:
                    prev_x = Cell_Membrane_Coordinates[0][cell_number][Node_Amount]
                    prev_y = Cell_Membrane_Coordinates[1][cell_number][Node_Amount]
                    original_prev_x = Original_Cell_Membrane_Coordinates[0][cell_number][Node_Amount]
                    original_prev_y = Original_Cell_Membrane_Coordinates[1][cell_number][Node_Amount]
                else:
                    prev_x = Cell_Membrane_Coordinates[0][cell_number][i-1]
                    prev_y = Cell_Membrane_Coordinates[1][cell_number][i-1]
                    original_prev_x = Original_Cell_Membrane_Coordinates[0][cell_number][i-1]
                    original_prev_y = Original_Cell_Membrane_Coordinates[1][cell_number][i-1]

                if i == Node_Amount:
                    next_x = Cell_Membrane_Coordinates[0][cell_number][1]
                    next_y = Cell_Membrane_Coordinates[1][cell_number][1]
                    original_next_x = Original_Cell_Membrane_Coordinates[0][cell_number][1]
                    original_next_y = Original_Cell_Membrane_Coordinates[1][cell_number][1]
                else:
                    next_x = Cell_Membrane_Coordinates[0][cell_number][i+1]
                    next_y = Cell_Membrane_Coordinates[1][cell_number][i+1]
                    original_next_x = Original_Cell_Membrane_Coordinates[0][cell_number][i+1]
                    original_next_y = Original_Cell_Membrane_Coordinates[1][cell_number][i+1]
                    

                Cell_Membrane_Coordinates[0][cell_number][i] += Beta * dcx * dt    + alpha * (n_x - m_x - (original_n_x - original_m_x)) * dt       + Delta * (original_m_x - original_next_x - (original_next_x - original_m_x) - (original_prev_x - original_m_x)  + (original_m_x - original_prev_x)) * dt
                
            
                Cell_Membrane_Coordinates[1][cell_number][i] += Beta * dcy * dt   + alpha * (n_y - m_y - (original_n_y - original_m_y)) * dt          + Delta * (original_m_y - original_next_y - (original_next_y - original_m_y) - (original_prev_y - original_m_y)  + (original_m_y - original_prev_y)) * dt
                

                
                
                # Update nucleus coordinates
                if i == 1:
                    prev_n_x = Cell_Nucleus_Coordinates[0][cell_number][Node_Amount]
                    prev_n_y = Cell_Nucleus_Coordinates[1][cell_number][Node_Amount]
                    original_prev_n_x = Original_Cell_Nucleus_Coordinates[0][cell_number][Node_Amount]
                    original_prev_n_y = Original_Cell_Nucleus_Coordinates[1][cell_number][Node_Amount]
                else:
                    prev_n_x = Cell_Nucleus_Coordinates[0][cell_number][i-1]
                    prev_n_y = Cell_Nucleus_Coordinates[1][cell_number][i-1]
                    original_prev_n_x = Original_Cell_Nucleus_Coordinates[0][cell_number][i-1]
                    original_prev_n_y = Original_Cell_Nucleus_Coordinates[1][cell_number][i-1]

                if i == Node_Amount:
                    next_n_x = Cell_Nucleus_Coordinates[0][cell_number][1]
                    next_n_y = Cell_Nucleus_Coordinates[1][cell_number][1]
                    original_next_n_x = Original_Cell_Nucleus_Coordinates[0][cell_number][1]
                    original_next_n_y = Original_Cell_Nucleus_Coordinates[1][cell_number][1]
                else:
                    next_n_x = Cell_Nucleus_Coordinates[0][cell_number][i+1]
                    next_n_y = Cell_Nucleus_Coordinates[1][cell_number][i+1]
                    original_next_n_x = Original_Cell_Nucleus_Coordinates[0][cell_number][i+1]
                    original_next_n_y = Original_Cell_Nucleus_Coordinates[1][cell_number][i+1]

                original_hat_y_x = (original_n_x - original_next_n_x)
                original_hat_y_y = (original_n_y - original_next_n_y)
                
                original_hat_x_x = (original_n_x - original_c_x)
                original_hat_x_y = (original_n_y - original_c_y)
                

                Cell_Nucleus_Coordinates[0][cell_number][i] += alpha_n * (c_x - n_x + (original_hat_x_x)) * dt - alpha * (n_x - m_x - (original_n_x - original_m_x)) * dt + delta_n * (original_hat_y_x - (original_next_n_x - original_n_x) - (original_prev_n_x - original_n_x) + (original_n_x - original_prev_n_x)) * dt
                Cell_Nucleus_Coordinates[1][cell_number][i] += alpha_n * (c_y - n_y + (original_hat_x_y)) * dt - alpha * (n_y - m_y - (original_n_y - original_m_y)) * dt + delta_n * (original_hat_y_y - (original_next_n_y - original_n_y) - (original_prev_n_y - original_n_y) + (original_n_y - original_prev_n_y)) * dt
            
    t += dt